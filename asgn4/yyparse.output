Terminals unused in grammar

   TOK_BLOCK
   TOK_CALL
   TOK_IFELSE
   TOK_INITDECL
   TOK_NEWARRAY
   TOK_TYPEID
   TOK_FIELD
   TOK_ROOT
   TOK_DECLID
   TOK_INDEX
   TOK_NEWSTRING
   TOK_RETURNVOID
   TOK_VARDECL
   TOK_FUNCTION
   TOK_PARAMLIST
   TOK_PROTOTYPE
   INTEGER
   '%'


State 14 conflicts: 1 shift/reduce
State 85 conflicts: 13 shift/reduce
State 108 conflicts: 13 shift/reduce
State 127 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program structdef
    2        | program function
    3        | program statement
    4        | program error '}'
    5        | program error ';'
    6        | %empty

    7 structdef: TOK_STRUCT TOK_IDENT '{' '}'
    8          | TOK_STRUCT TOK_IDENT multi_block '}'

    9 multi_block: '{' fielddecl ';'
   10            | multi_block fielddecl ';'

   11 fielddecl: basetype TOK_ARRAY TOK_IDENT
   12          | basetype TOK_IDENT

   13 basetype: TOK_VOID
   14         | TOK_BOOL
   15         | TOK_CHAR
   16         | TOK_INT
   17         | TOK_STRING
   18         | TOK_IDENT

   19 function: identdecl '(' ')' ';'
   20         | identdecl '(' ')' block
   21         | identdecl multi_identdecl ')' ';'
   22         | identdecl multi_identdecl ')' block

   23 multi_identdecl: '(' identdecl
   24                | multi_identdecl ',' identdecl

   25 identdecl: basetype TOK_ARRAY TOK_IDENT
   26          | basetype TOK_IDENT

   27 block: '{' '}'
   28      | multi_statement '}'

   29 multi_statement: '{' statement
   30                | multi_statement statement

   31 statement: block
   32          | vardecl
   33          | while
   34          | ifelse
   35          | return
   36          | expr ';'
   37          | ';'

   38 vardecl: identdecl '=' expr ';'

   39 while: TOK_WHILE '(' expr ')' statement

   40 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement
   41       | TOK_IF '(' expr ')' statement

   42 return: TOK_RETURN ';'
   43       | TOK_RETURN expr ';'

   44 expr: expr binop expr
   45     | unop expr
   46     | allocator
   47     | call
   48     | '(' expr ')'
   49     | variable
   50     | constant

   51 binop: TOK_EQ
   52      | TOK_NE
   53      | TOK_LT
   54      | TOK_LE
   55      | TOK_GT
   56      | TOK_GE
   57      | '+'
   58      | '-'
   59      | '*'
   60      | '/'
   61      | '='

   62 unop: TOK_POS
   63     | TOK_NEG
   64     | '!'
   65     | TOK_NEW
   66     | TOK_ORD
   67     | TOK_CHR

   68 allocator: TOK_NEW TOK_IDENT '(' ')'
   69          | TOK_NEW TOK_STRING '(' expr ')'
   70          | TOK_NEW basetype '[' expr ']'

   71 call: TOK_IDENT '(' ')'
   72     | multi_expr ')'

   73 multi_expr: TOK_IDENT '(' expr
   74           | multi_expr ',' expr

   75 variable: TOK_IDENT
   76         | expr '[' expr ']'
   77         | expr '.' TOK_IDENT

   78 constant: TOK_INTCON
   79         | TOK_CHARCON
   80         | TOK_STRINGCON
   81         | TOK_FALSE
   82         | TOK_TRUE
   83         | TOK_NULL


Terminals, with rules where they appear

$end (0) 0
'!' (33) 64
'%' (37)
'(' (40) 19 20 23 39 40 41 48 68 69 71 73
')' (41) 19 20 21 22 39 40 41 48 68 69 71 72
'*' (42) 59
'+' (43) 57
',' (44) 24 74
'-' (45) 58
'.' (46) 77
'/' (47) 60
';' (59) 5 9 10 19 21 36 37 38 42 43
'=' (61) 38 61
'[' (91) 70 76
']' (93) 70 76
'{' (123) 7 9 27 29
'}' (125) 4 7 8 27 28
error (256) 4 5
TOK_VOID (258) 13
TOK_CHAR (259) 15
TOK_INT (260) 16
TOK_STRING (261) 17 69
TOK_BOOL (262) 14
TOK_IF (263) 40 41
TOK_ELSE (264) 40
TOK_WHILE (265) 39
TOK_RETURN (266) 42 43
TOK_STRUCT (267) 7 8
TOK_NULL (268) 83
TOK_NEW (269) 65 68 69 70
TOK_ARRAY (270) 11 25
TOK_TRUE (271) 82
TOK_FALSE (272) 81
TOK_EQ (273) 51
TOK_NE (274) 52
TOK_LT (275) 53
TOK_LE (276) 54
TOK_GT (277) 55
TOK_GE (278) 56
TOK_IDENT (279) 7 8 11 12 18 25 26 68 71 73 75 77
TOK_INTCON (280) 78
TOK_CHARCON (281) 79
TOK_STRINGCON (282) 80
TOK_BLOCK (283)
TOK_CALL (284)
TOK_IFELSE (285)
TOK_INITDECL (286)
TOK_POS (287) 62
TOK_NEG (288) 63
TOK_NEWARRAY (289)
TOK_TYPEID (290)
TOK_FIELD (291)
TOK_ORD (292) 66
TOK_CHR (293) 67
TOK_ROOT (294)
TOK_DECLID (295)
TOK_INDEX (296)
TOK_NEWSTRING (297)
TOK_RETURNVOID (298)
TOK_VARDECL (299)
TOK_FUNCTION (300)
TOK_PARAMLIST (301)
TOK_PROTOTYPE (302)
INTEGER (303)


Nonterminals, with rules where they appear

$accept (65)
    on left: 0
program (66)
    on left: 1 2 3 4 5 6, on right: 0 1 2 3 4 5
structdef (67)
    on left: 7 8, on right: 1
multi_block (68)
    on left: 9 10, on right: 8 10
fielddecl (69)
    on left: 11 12, on right: 9 10
basetype (70)
    on left: 13 14 15 16 17 18, on right: 11 12 25 26 70
function (71)
    on left: 19 20 21 22, on right: 2
multi_identdecl (72)
    on left: 23 24, on right: 21 22 24
identdecl (73)
    on left: 25 26, on right: 19 20 21 22 23 24 38
block (74)
    on left: 27 28, on right: 20 22 31
multi_statement (75)
    on left: 29 30, on right: 28 30
statement (76)
    on left: 31 32 33 34 35 36 37, on right: 3 29 30 39 40 41
vardecl (77)
    on left: 38, on right: 32
while (78)
    on left: 39, on right: 33
ifelse (79)
    on left: 40 41, on right: 34
return (80)
    on left: 42 43, on right: 35
expr (81)
    on left: 44 45 46 47 48 49 50, on right: 36 38 39 40 41 43 44 45
    48 69 70 73 74 76 77
binop (82)
    on left: 51 52 53 54 55 56 57 58 59 60 61, on right: 44
unop (83)
    on left: 62 63 64 65 66 67, on right: 45
allocator (84)
    on left: 68 69 70, on right: 46
call (85)
    on left: 71 72, on right: 47
multi_expr (86)
    on left: 73 74, on right: 72 74
variable (87)
    on left: 75 76 77, on right: 49
constant (88)
    on left: 78 79 80 81 82 83, on right: 50


State 0

    0 $accept: . program $end

    $default  reduce using rule 6 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . structdef
    2        | program . function
    3        | program . statement
    4        | program . error '}'
    5        | program . error ';'

    $end           shift, and go to state 2
    error          shift, and go to state 3
    TOK_VOID       shift, and go to state 4
    TOK_CHAR       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_BOOL       shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_STRUCT     shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_FALSE      shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_POS        shift, and go to state 21
    TOK_NEG        shift, and go to state 22
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28

    structdef        go to state 29
    basetype         go to state 30
    function         go to state 31
    identdecl        go to state 32
    block            go to state 33
    multi_statement  go to state 34
    statement        go to state 35
    vardecl          go to state 36
    while            go to state 37
    ifelse           go to state 38
    return           go to state 39
    expr             go to state 40
    unop             go to state 41
    allocator        go to state 42
    call             go to state 43
    multi_expr       go to state 44
    variable         go to state 45
    constant         go to state 46


State 2

    0 $accept: program $end .

    $default  accept


State 3

    4 program: program error . '}'
    5        | program error . ';'

    '}'  shift, and go to state 47
    ';'  shift, and go to state 48


State 4

   13 basetype: TOK_VOID .

    $default  reduce using rule 13 (basetype)


State 5

   15 basetype: TOK_CHAR .

    $default  reduce using rule 15 (basetype)


State 6

   16 basetype: TOK_INT .

    $default  reduce using rule 16 (basetype)


State 7

   17 basetype: TOK_STRING .

    $default  reduce using rule 17 (basetype)


State 8

   14 basetype: TOK_BOOL .

    $default  reduce using rule 14 (basetype)


State 9

   40 ifelse: TOK_IF . '(' expr ')' statement TOK_ELSE statement
   41       | TOK_IF . '(' expr ')' statement

    '('  shift, and go to state 49


State 10

   39 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 50


State 11

   42 return: TOK_RETURN . ';'
   43       | TOK_RETURN . expr ';'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_FALSE      shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_POS        shift, and go to state 21
    TOK_NEG        shift, and go to state 22
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    ';'            shift, and go to state 52

    expr        go to state 53
    unop        go to state 41
    allocator   go to state 42
    call        go to state 43
    multi_expr  go to state 44
    variable    go to state 45
    constant    go to state 46


State 12

    7 structdef: TOK_STRUCT . TOK_IDENT '{' '}'
    8          | TOK_STRUCT . TOK_IDENT multi_block '}'

    TOK_IDENT  shift, and go to state 54


State 13

   83 constant: TOK_NULL .

    $default  reduce using rule 83 (constant)


State 14

   65 unop: TOK_NEW .
   68 allocator: TOK_NEW . TOK_IDENT '(' ')'
   69          | TOK_NEW . TOK_STRING '(' expr ')'
   70          | TOK_NEW . basetype '[' expr ']'

    TOK_VOID    shift, and go to state 4
    TOK_CHAR    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 55
    TOK_BOOL    shift, and go to state 8
    TOK_IDENT   shift, and go to state 56

    TOK_IDENT  [reduce using rule 65 (unop)]
    $default   reduce using rule 65 (unop)

    basetype  go to state 57


State 15

   82 constant: TOK_TRUE .

    $default  reduce using rule 82 (constant)


State 16

   81 constant: TOK_FALSE .

    $default  reduce using rule 81 (constant)


State 17

   18 basetype: TOK_IDENT .
   71 call: TOK_IDENT . '(' ')'
   73 multi_expr: TOK_IDENT . '(' expr
   75 variable: TOK_IDENT .

    '('  shift, and go to state 58

    TOK_ARRAY  reduce using rule 18 (basetype)
    TOK_IDENT  reduce using rule 18 (basetype)
    $default   reduce using rule 75 (variable)


State 18

   78 constant: TOK_INTCON .

    $default  reduce using rule 78 (constant)


State 19

   79 constant: TOK_CHARCON .

    $default  reduce using rule 79 (constant)


State 20

   80 constant: TOK_STRINGCON .

    $default  reduce using rule 80 (constant)


State 21

   62 unop: TOK_POS .

    $default  reduce using rule 62 (unop)


State 22

   63 unop: TOK_NEG .

    $default  reduce using rule 63 (unop)


State 23

   66 unop: TOK_ORD .

    $default  reduce using rule 66 (unop)


State 24

   67 unop: TOK_CHR .

    $default  reduce using rule 67 (unop)


State 25

   64 unop: '!' .

    $default  reduce using rule 64 (unop)


State 26

   48 expr: '(' . expr ')'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_FALSE      shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_POS        shift, and go to state 21
    TOK_NEG        shift, and go to state 22
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr        go to state 59
    unop        go to state 41
    allocator   go to state 42
    call        go to state 43
    multi_expr  go to state 44
    variable    go to state 45
    constant    go to state 46


State 27

   37 statement: ';' .

    $default  reduce using rule 37 (statement)


State 28

   27 block: '{' . '}'
   29 multi_statement: '{' . statement

    TOK_VOID       shift, and go to state 4
    TOK_CHAR       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_BOOL       shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_FALSE      shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_POS        shift, and go to state 21
    TOK_NEG        shift, and go to state 22
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    '}'            shift, and go to state 60
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28

    basetype         go to state 30
    identdecl        go to state 61
    block            go to state 33
    multi_statement  go to state 34
    statement        go to state 62
    vardecl          go to state 36
    while            go to state 37
    ifelse           go to state 38
    return           go to state 39
    expr             go to state 40
    unop             go to state 41
    allocator        go to state 42
    call             go to state 43
    multi_expr       go to state 44
    variable         go to state 45
    constant         go to state 46


State 29

    1 program: program structdef .

    $default  reduce using rule 1 (program)


State 30

   25 identdecl: basetype . TOK_ARRAY TOK_IDENT
   26          | basetype . TOK_IDENT

    TOK_ARRAY  shift, and go to state 63
    TOK_IDENT  shift, and go to state 64


State 31

    2 program: program function .

    $default  reduce using rule 2 (program)


State 32

   19 function: identdecl . '(' ')' ';'
   20         | identdecl . '(' ')' block
   21         | identdecl . multi_identdecl ')' ';'
   22         | identdecl . multi_identdecl ')' block
   38 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 65
    '('  shift, and go to state 66

    multi_identdecl  go to state 67


State 33

   31 statement: block .

    $default  reduce using rule 31 (statement)


State 34

   28 block: multi_statement . '}'
   30 multi_statement: multi_statement . statement

    TOK_VOID       shift, and go to state 4
    TOK_CHAR       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_BOOL       shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_FALSE      shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_POS        shift, and go to state 21
    TOK_NEG        shift, and go to state 22
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    '}'            shift, and go to state 68
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28

    basetype         go to state 30
    identdecl        go to state 61
    block            go to state 33
    multi_statement  go to state 34
    statement        go to state 69
    vardecl          go to state 36
    while            go to state 37
    ifelse           go to state 38
    return           go to state 39
    expr             go to state 40
    unop             go to state 41
    allocator        go to state 42
    call             go to state 43
    multi_expr       go to state 44
    variable         go to state 45
    constant         go to state 46


State 35

    3 program: program statement .

    $default  reduce using rule 3 (program)


State 36

   32 statement: vardecl .

    $default  reduce using rule 32 (statement)


State 37

   33 statement: while .

    $default  reduce using rule 33 (statement)


State 38

   34 statement: ifelse .

    $default  reduce using rule 34 (statement)


State 39

   35 statement: return .

    $default  reduce using rule 35 (statement)


State 40

   36 statement: expr . ';'
   44 expr: expr . binop expr
   76 variable: expr . '[' expr ']'
   77         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82
    ';'     shift, and go to state 83

    binop  go to state 84


State 41

   45 expr: unop . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_FALSE      shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_POS        shift, and go to state 21
    TOK_NEG        shift, and go to state 22
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr        go to state 85
    unop        go to state 41
    allocator   go to state 42
    call        go to state 43
    multi_expr  go to state 44
    variable    go to state 45
    constant    go to state 46


State 42

   46 expr: allocator .

    $default  reduce using rule 46 (expr)


State 43

   47 expr: call .

    $default  reduce using rule 47 (expr)


State 44

   72 call: multi_expr . ')'
   74 multi_expr: multi_expr . ',' expr

    ')'  shift, and go to state 86
    ','  shift, and go to state 87


State 45

   49 expr: variable .

    $default  reduce using rule 49 (expr)


State 46

   50 expr: constant .

    $default  reduce using rule 50 (expr)


State 47

    4 program: program error '}' .

    $default  reduce using rule 4 (program)


State 48

    5 program: program error ';' .

    $default  reduce using rule 5 (program)


State 49

   40 ifelse: TOK_IF '(' . expr ')' statement TOK_ELSE statement
   41       | TOK_IF '(' . expr ')' statement

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_FALSE      shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_POS        shift, and go to state 21
    TOK_NEG        shift, and go to state 22
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr        go to state 88
    unop        go to state 41
    allocator   go to state 42
    call        go to state 43
    multi_expr  go to state 44
    variable    go to state 45
    constant    go to state 46


State 50

   39 while: TOK_WHILE '(' . expr ')' statement

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_FALSE      shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_POS        shift, and go to state 21
    TOK_NEG        shift, and go to state 22
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr        go to state 89
    unop        go to state 41
    allocator   go to state 42
    call        go to state 43
    multi_expr  go to state 44
    variable    go to state 45
    constant    go to state 46


State 51

   71 call: TOK_IDENT . '(' ')'
   73 multi_expr: TOK_IDENT . '(' expr
   75 variable: TOK_IDENT .

    '('  shift, and go to state 58

    $default  reduce using rule 75 (variable)


State 52

   42 return: TOK_RETURN ';' .

    $default  reduce using rule 42 (return)


State 53

   43 return: TOK_RETURN expr . ';'
   44 expr: expr . binop expr
   76 variable: expr . '[' expr ']'
   77         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82
    ';'     shift, and go to state 90

    binop  go to state 84


State 54

    7 structdef: TOK_STRUCT TOK_IDENT . '{' '}'
    8          | TOK_STRUCT TOK_IDENT . multi_block '}'

    '{'  shift, and go to state 91

    multi_block  go to state 92


State 55

   17 basetype: TOK_STRING .
   69 allocator: TOK_NEW TOK_STRING . '(' expr ')'

    '('  shift, and go to state 93

    $default  reduce using rule 17 (basetype)


State 56

   18 basetype: TOK_IDENT .
   68 allocator: TOK_NEW TOK_IDENT . '(' ')'

    '('  shift, and go to state 94

    $default  reduce using rule 18 (basetype)


State 57

   70 allocator: TOK_NEW basetype . '[' expr ']'

    '['  shift, and go to state 95


State 58

   71 call: TOK_IDENT '(' . ')'
   73 multi_expr: TOK_IDENT '(' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_FALSE      shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_POS        shift, and go to state 21
    TOK_NEG        shift, and go to state 22
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    ')'            shift, and go to state 96

    expr        go to state 97
    unop        go to state 41
    allocator   go to state 42
    call        go to state 43
    multi_expr  go to state 44
    variable    go to state 45
    constant    go to state 46


State 59

   44 expr: expr . binop expr
   48     | '(' expr . ')'
   76 variable: expr . '[' expr ']'
   77         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82
    ')'     shift, and go to state 98

    binop  go to state 84


State 60

   27 block: '{' '}' .

    $default  reduce using rule 27 (block)


State 61

   38 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 65


State 62

   29 multi_statement: '{' statement .

    $default  reduce using rule 29 (multi_statement)


State 63

   25 identdecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 99


State 64

   26 identdecl: basetype TOK_IDENT .

    $default  reduce using rule 26 (identdecl)


State 65

   38 vardecl: identdecl '=' . expr ';'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_FALSE      shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_POS        shift, and go to state 21
    TOK_NEG        shift, and go to state 22
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr        go to state 100
    unop        go to state 41
    allocator   go to state 42
    call        go to state 43
    multi_expr  go to state 44
    variable    go to state 45
    constant    go to state 46


State 66

   19 function: identdecl '(' . ')' ';'
   20         | identdecl '(' . ')' block
   23 multi_identdecl: '(' . identdecl

    TOK_VOID    shift, and go to state 4
    TOK_CHAR    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_BOOL    shift, and go to state 8
    TOK_IDENT   shift, and go to state 101
    ')'         shift, and go to state 102

    basetype   go to state 30
    identdecl  go to state 103


State 67

   21 function: identdecl multi_identdecl . ')' ';'
   22         | identdecl multi_identdecl . ')' block
   24 multi_identdecl: multi_identdecl . ',' identdecl

    ')'  shift, and go to state 104
    ','  shift, and go to state 105


State 68

   28 block: multi_statement '}' .

    $default  reduce using rule 28 (block)


State 69

   30 multi_statement: multi_statement statement .

    $default  reduce using rule 30 (multi_statement)


State 70

   51 binop: TOK_EQ .

    $default  reduce using rule 51 (binop)


State 71

   52 binop: TOK_NE .

    $default  reduce using rule 52 (binop)


State 72

   53 binop: TOK_LT .

    $default  reduce using rule 53 (binop)


State 73

   54 binop: TOK_LE .

    $default  reduce using rule 54 (binop)


State 74

   55 binop: TOK_GT .

    $default  reduce using rule 55 (binop)


State 75

   56 binop: TOK_GE .

    $default  reduce using rule 56 (binop)


State 76

   61 binop: '=' .

    $default  reduce using rule 61 (binop)


State 77

   57 binop: '+' .

    $default  reduce using rule 57 (binop)


State 78

   58 binop: '-' .

    $default  reduce using rule 58 (binop)


State 79

   59 binop: '*' .

    $default  reduce using rule 59 (binop)


State 80

   60 binop: '/' .

    $default  reduce using rule 60 (binop)


State 81

   76 variable: expr '[' . expr ']'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_FALSE      shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_POS        shift, and go to state 21
    TOK_NEG        shift, and go to state 22
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr        go to state 106
    unop        go to state 41
    allocator   go to state 42
    call        go to state 43
    multi_expr  go to state 44
    variable    go to state 45
    constant    go to state 46


State 82

   77 variable: expr '.' . TOK_IDENT

    TOK_IDENT  shift, and go to state 107


State 83

   36 statement: expr ';' .

    $default  reduce using rule 36 (statement)


State 84

   44 expr: expr binop . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_FALSE      shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_POS        shift, and go to state 21
    TOK_NEG        shift, and go to state 22
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr        go to state 108
    unop        go to state 41
    allocator   go to state 42
    call        go to state 43
    multi_expr  go to state 44
    variable    go to state 45
    constant    go to state 46


State 85

   44 expr: expr . binop expr
   45     | unop expr .
   76 variable: expr . '[' expr ']'
   77         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82

    TOK_EQ    [reduce using rule 45 (expr)]
    TOK_NE    [reduce using rule 45 (expr)]
    TOK_LT    [reduce using rule 45 (expr)]
    TOK_LE    [reduce using rule 45 (expr)]
    TOK_GT    [reduce using rule 45 (expr)]
    TOK_GE    [reduce using rule 45 (expr)]
    '='       [reduce using rule 45 (expr)]
    '+'       [reduce using rule 45 (expr)]
    '-'       [reduce using rule 45 (expr)]
    '*'       [reduce using rule 45 (expr)]
    '/'       [reduce using rule 45 (expr)]
    '['       [reduce using rule 45 (expr)]
    '.'       [reduce using rule 45 (expr)]
    $default  reduce using rule 45 (expr)

    binop  go to state 84


State 86

   72 call: multi_expr ')' .

    $default  reduce using rule 72 (call)


State 87

   74 multi_expr: multi_expr ',' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_FALSE      shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_POS        shift, and go to state 21
    TOK_NEG        shift, and go to state 22
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr        go to state 109
    unop        go to state 41
    allocator   go to state 42
    call        go to state 43
    multi_expr  go to state 44
    variable    go to state 45
    constant    go to state 46


State 88

   40 ifelse: TOK_IF '(' expr . ')' statement TOK_ELSE statement
   41       | TOK_IF '(' expr . ')' statement
   44 expr: expr . binop expr
   76 variable: expr . '[' expr ']'
   77         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82
    ')'     shift, and go to state 110

    binop  go to state 84


State 89

   39 while: TOK_WHILE '(' expr . ')' statement
   44 expr: expr . binop expr
   76 variable: expr . '[' expr ']'
   77         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82
    ')'     shift, and go to state 111

    binop  go to state 84


State 90

   43 return: TOK_RETURN expr ';' .

    $default  reduce using rule 43 (return)


State 91

    7 structdef: TOK_STRUCT TOK_IDENT '{' . '}'
    9 multi_block: '{' . fielddecl ';'

    TOK_VOID    shift, and go to state 4
    TOK_CHAR    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_BOOL    shift, and go to state 8
    TOK_IDENT   shift, and go to state 101
    '}'         shift, and go to state 112

    fielddecl  go to state 113
    basetype   go to state 114


State 92

    8 structdef: TOK_STRUCT TOK_IDENT multi_block . '}'
   10 multi_block: multi_block . fielddecl ';'

    TOK_VOID    shift, and go to state 4
    TOK_CHAR    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_BOOL    shift, and go to state 8
    TOK_IDENT   shift, and go to state 101
    '}'         shift, and go to state 115

    fielddecl  go to state 116
    basetype   go to state 114


State 93

   69 allocator: TOK_NEW TOK_STRING '(' . expr ')'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_FALSE      shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_POS        shift, and go to state 21
    TOK_NEG        shift, and go to state 22
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr        go to state 117
    unop        go to state 41
    allocator   go to state 42
    call        go to state 43
    multi_expr  go to state 44
    variable    go to state 45
    constant    go to state 46


State 94

   68 allocator: TOK_NEW TOK_IDENT '(' . ')'

    ')'  shift, and go to state 118


State 95

   70 allocator: TOK_NEW basetype '[' . expr ']'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_FALSE      shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_POS        shift, and go to state 21
    TOK_NEG        shift, and go to state 22
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr        go to state 119
    unop        go to state 41
    allocator   go to state 42
    call        go to state 43
    multi_expr  go to state 44
    variable    go to state 45
    constant    go to state 46


State 96

   71 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 71 (call)


State 97

   44 expr: expr . binop expr
   73 multi_expr: TOK_IDENT '(' expr .
   76 variable: expr . '[' expr ']'
   77         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82

    $default  reduce using rule 73 (multi_expr)

    binop  go to state 84


State 98

   48 expr: '(' expr ')' .

    $default  reduce using rule 48 (expr)


State 99

   25 identdecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 25 (identdecl)


State 100

   38 vardecl: identdecl '=' expr . ';'
   44 expr: expr . binop expr
   76 variable: expr . '[' expr ']'
   77         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82
    ';'     shift, and go to state 120

    binop  go to state 84


State 101

   18 basetype: TOK_IDENT .

    $default  reduce using rule 18 (basetype)


State 102

   19 function: identdecl '(' ')' . ';'
   20         | identdecl '(' ')' . block

    ';'  shift, and go to state 121
    '{'  shift, and go to state 28

    block            go to state 122
    multi_statement  go to state 34


State 103

   23 multi_identdecl: '(' identdecl .

    $default  reduce using rule 23 (multi_identdecl)


State 104

   21 function: identdecl multi_identdecl ')' . ';'
   22         | identdecl multi_identdecl ')' . block

    ';'  shift, and go to state 123
    '{'  shift, and go to state 28

    block            go to state 124
    multi_statement  go to state 34


State 105

   24 multi_identdecl: multi_identdecl ',' . identdecl

    TOK_VOID    shift, and go to state 4
    TOK_CHAR    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_BOOL    shift, and go to state 8
    TOK_IDENT   shift, and go to state 101

    basetype   go to state 30
    identdecl  go to state 125


State 106

   44 expr: expr . binop expr
   76 variable: expr . '[' expr ']'
   76         | expr '[' expr . ']'
   77         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82
    ']'     shift, and go to state 126

    binop  go to state 84


State 107

   77 variable: expr '.' TOK_IDENT .

    $default  reduce using rule 77 (variable)


State 108

   44 expr: expr . binop expr
   44     | expr binop expr .
   76 variable: expr . '[' expr ']'
   77         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82

    TOK_EQ    [reduce using rule 44 (expr)]
    TOK_NE    [reduce using rule 44 (expr)]
    TOK_LT    [reduce using rule 44 (expr)]
    TOK_LE    [reduce using rule 44 (expr)]
    TOK_GT    [reduce using rule 44 (expr)]
    TOK_GE    [reduce using rule 44 (expr)]
    '='       [reduce using rule 44 (expr)]
    '+'       [reduce using rule 44 (expr)]
    '-'       [reduce using rule 44 (expr)]
    '*'       [reduce using rule 44 (expr)]
    '/'       [reduce using rule 44 (expr)]
    '['       [reduce using rule 44 (expr)]
    '.'       [reduce using rule 44 (expr)]
    $default  reduce using rule 44 (expr)

    binop  go to state 84


State 109

   44 expr: expr . binop expr
   74 multi_expr: multi_expr ',' expr .
   76 variable: expr . '[' expr ']'
   77         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82

    $default  reduce using rule 74 (multi_expr)

    binop  go to state 84


State 110

   40 ifelse: TOK_IF '(' expr ')' . statement TOK_ELSE statement
   41       | TOK_IF '(' expr ')' . statement

    TOK_VOID       shift, and go to state 4
    TOK_CHAR       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_BOOL       shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_FALSE      shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_POS        shift, and go to state 21
    TOK_NEG        shift, and go to state 22
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28

    basetype         go to state 30
    identdecl        go to state 61
    block            go to state 33
    multi_statement  go to state 34
    statement        go to state 127
    vardecl          go to state 36
    while            go to state 37
    ifelse           go to state 38
    return           go to state 39
    expr             go to state 40
    unop             go to state 41
    allocator        go to state 42
    call             go to state 43
    multi_expr       go to state 44
    variable         go to state 45
    constant         go to state 46


State 111

   39 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 4
    TOK_CHAR       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_BOOL       shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_FALSE      shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_POS        shift, and go to state 21
    TOK_NEG        shift, and go to state 22
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28

    basetype         go to state 30
    identdecl        go to state 61
    block            go to state 33
    multi_statement  go to state 34
    statement        go to state 128
    vardecl          go to state 36
    while            go to state 37
    ifelse           go to state 38
    return           go to state 39
    expr             go to state 40
    unop             go to state 41
    allocator        go to state 42
    call             go to state 43
    multi_expr       go to state 44
    variable         go to state 45
    constant         go to state 46


State 112

    7 structdef: TOK_STRUCT TOK_IDENT '{' '}' .

    $default  reduce using rule 7 (structdef)


State 113

    9 multi_block: '{' fielddecl . ';'

    ';'  shift, and go to state 129


State 114

   11 fielddecl: basetype . TOK_ARRAY TOK_IDENT
   12          | basetype . TOK_IDENT

    TOK_ARRAY  shift, and go to state 130
    TOK_IDENT  shift, and go to state 131


State 115

    8 structdef: TOK_STRUCT TOK_IDENT multi_block '}' .

    $default  reduce using rule 8 (structdef)


State 116

   10 multi_block: multi_block fielddecl . ';'

    ';'  shift, and go to state 132


State 117

   44 expr: expr . binop expr
   69 allocator: TOK_NEW TOK_STRING '(' expr . ')'
   76 variable: expr . '[' expr ']'
   77         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82
    ')'     shift, and go to state 133

    binop  go to state 84


State 118

   68 allocator: TOK_NEW TOK_IDENT '(' ')' .

    $default  reduce using rule 68 (allocator)


State 119

   44 expr: expr . binop expr
   70 allocator: TOK_NEW basetype '[' expr . ']'
   76 variable: expr . '[' expr ']'
   77         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82
    ']'     shift, and go to state 134

    binop  go to state 84


State 120

   38 vardecl: identdecl '=' expr ';' .

    $default  reduce using rule 38 (vardecl)


State 121

   19 function: identdecl '(' ')' ';' .

    $default  reduce using rule 19 (function)


State 122

   20 function: identdecl '(' ')' block .

    $default  reduce using rule 20 (function)


State 123

   21 function: identdecl multi_identdecl ')' ';' .

    $default  reduce using rule 21 (function)


State 124

   22 function: identdecl multi_identdecl ')' block .

    $default  reduce using rule 22 (function)


State 125

   24 multi_identdecl: multi_identdecl ',' identdecl .

    $default  reduce using rule 24 (multi_identdecl)


State 126

   76 variable: expr '[' expr ']' .

    $default  reduce using rule 76 (variable)


State 127

   40 ifelse: TOK_IF '(' expr ')' statement . TOK_ELSE statement
   41       | TOK_IF '(' expr ')' statement .

    TOK_ELSE  shift, and go to state 135

    TOK_ELSE  [reduce using rule 41 (ifelse)]
    $default  reduce using rule 41 (ifelse)


State 128

   39 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 39 (while)


State 129

    9 multi_block: '{' fielddecl ';' .

    $default  reduce using rule 9 (multi_block)


State 130

   11 fielddecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 136


State 131

   12 fielddecl: basetype TOK_IDENT .

    $default  reduce using rule 12 (fielddecl)


State 132

   10 multi_block: multi_block fielddecl ';' .

    $default  reduce using rule 10 (multi_block)


State 133

   69 allocator: TOK_NEW TOK_STRING '(' expr ')' .

    $default  reduce using rule 69 (allocator)


State 134

   70 allocator: TOK_NEW basetype '[' expr ']' .

    $default  reduce using rule 70 (allocator)


State 135

   40 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    TOK_VOID       shift, and go to state 4
    TOK_CHAR       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_BOOL       shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_FALSE      shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_POS        shift, and go to state 21
    TOK_NEG        shift, and go to state 22
    TOK_ORD        shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28

    basetype         go to state 30
    identdecl        go to state 61
    block            go to state 33
    multi_statement  go to state 34
    statement        go to state 137
    vardecl          go to state 36
    while            go to state 37
    ifelse           go to state 38
    return           go to state 39
    expr             go to state 40
    unop             go to state 41
    allocator        go to state 42
    call             go to state 43
    multi_expr       go to state 44
    variable         go to state 45
    constant         go to state 46


State 136

   11 fielddecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 11 (fielddecl)


State 137

   40 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 40 (ifelse)
